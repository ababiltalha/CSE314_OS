diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..ba9207f
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,16 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "gnu17",
+            "cppStandard": "gnu++17",
+            "intelliSenseMode": "linux-gcc-x64"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..01cb7e5 100644
--- a/Makefile
+++ b/Makefile
@@ -28,6 +28,7 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
+  $K/rand.o \
   $K/virtio_disk.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_testticket\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..775f4e0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +189,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// rand.c
+unsigned int    taus88(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..bb5fbab 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,9 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+
+int add_current_tickets(void);
 
 struct cpu cpus[NCPU];
 
@@ -311,6 +314,9 @@ fork(void)
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
+  // a child inherits the same number of tickets as its parent
+  np->tickets_original = p->tickets_original;
+  np->tickets_current = np->tickets_original;
 
   release(&np->lock);
 
@@ -441,33 +447,72 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
+// * Lottery scheduler implemented, using process specific
+// * ticket number as probability of being chosen by 
+// * the scheduler
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
+  // default assignment of ticket(s) to a process : currently 1
+  acquire(&proc->lock);
+  proc->tickets_original = 1;
+  release(&proc->lock);
   
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    int total_current_tickets = 0;
+    // check if all tickets are used up by all RUNNABLE processes
+    // if so, reinitiate all tickets to original
+    if(add_current_tickets()==0){
+      for(p = proc; p < &proc[NPROC]; p++){
+        acquire(&p->lock);
+        if(p->state == RUNNABLE) {
+          p->tickets_current = p->tickets_original;
+        }
+        release(&p->lock);
+      }
+    }
+    total_current_tickets = add_current_tickets();
+
+    // get random number to choose process
+    int random = taus88()%total_current_tickets;
+    int current_ticket_count = 0;
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        current_ticket_count += p->tickets_current;
+        if(current_ticket_count > random) {
+          release(&p->lock);
+          break;
+        }
       }
       release(&p->lock);
     }
+    // start running the chosen process
+    acquire(&p->lock);
+    if(p->state == RUNNABLE) {
+      p->time_slices++;
+      // if (p->tickets_current > 0) p->tickets_current--; 
+      if (p->tickets_current > 1) p->tickets_current--;
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      p->state = RUNNING;
+      c->proc = p;
+      swtch(&c->context, &p->context);
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+    }
+    release(&p->lock);
   }
 }
 
@@ -681,3 +726,58 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Set the number of tickets for the calling process
+int
+settickets(int tickets)
+{
+  struct proc *p = myproc();
+  if(tickets<1){
+    return -1;
+  }
+  acquire(&p->lock);
+  p->tickets_original = tickets;
+  release(&p->lock);
+  return 0;
+}
+
+// Get the process information including current and original number of tickets
+// along with the number of time slices
+int
+getpinfo(uint64 pst)
+{
+  struct proc *p;
+  struct pstat temppst;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    temppst.pid[i] = p->pid;
+    if (p->state != UNUSED) temppst.inuse[i] = 1;
+    else temppst.inuse[i] = 0;
+    temppst.tickets_original[i] = p->tickets_original;
+    temppst.tickets_current[i] = p->tickets_current;
+    temppst.time_slices[i] = p->time_slices;
+    release(&p->lock);
+    i++;
+  }
+  if(copyout(myproc()->pagetable, pst, (char*)&temppst, sizeof(temppst)) < 0)
+    return -1;
+  return 0;
+}
+
+
+// Util function to add the current available tickets
+int
+add_current_tickets(void)
+{
+  struct proc *p;
+  int total_current_tickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      total_current_tickets += p->tickets_current;
+    }
+    release(&p->lock);
+  }
+  return total_current_tickets;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c808659 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // for new scheduler
+  int tickets_original;        // Original number of tickets
+  int tickets_current;         // Current number of tickets
+  int time_slices;             // Number of time slices scheduled (given to the process)
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..9985b82
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,27 @@
+/*
+   32-bits Random number generator U[0,1): lfsr88
+   Author: Pierre L'Ecuyer,
+   Source: https://github.com/cmcqueen/simplerandom
+*/
+
+// #include "lfsr88.h"
+
+
+/**** VERY IMPORTANT **** :
+  The initial seeds s1, s2, s3  MUST be larger than
+  1, 7, and 15 respectively.
+*/
+
+#define SEED 12345
+static unsigned int s1 = SEED, s2 = SEED, s3 = SEED, b;
+
+unsigned int taus88 (void)
+{
+b = (((s1 << 13) ^ s1) >> 19);
+s1 = (((s1 & 4294967294) << 12) ^ b);
+b = (((s2 << 2) ^ s2) >> 25);
+s2 = (((s2 & 4294967288) << 4) ^ b);
+b = (((s3 << 3) ^ s3) >> 11);
+s3 = (((s3 & 4294967280) << 17) ^ b);
+return (s1 ^ s2 ^ s3);
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..c74fa8f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+// new system calls
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]    sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..8523b4a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+// new system calls
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..744ebcf 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,24 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+// returns 0 if successful, 
+// -1 if invalid ticket number
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  return settickets(n);
+}
+
+// returns 0 if successful, 
+// -1 if unable to process parameter pointer
+uint64
+sys_getpinfo(void)
+{
+  uint64 pst;
+  argaddr(0, &pst);
+  return getpinfo(pst);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..6ffb81d
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char *argv[])
+{
+    struct pstat pst;
+    if(getpinfo(&pst) < 0) exit(1);
+    printf("PID | In Use | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++) {
+        if(pst.inuse[i]==1)
+            printf(" %d\t%d\t\t%d\t\t%d\t\t%d\n", 
+                pst.pid[i], pst.inuse[i], pst.tickets_original[i], pst.tickets_current[i], pst.time_slices[i]);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..7a448a5
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,29 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char *argv[])
+{
+    if(argc != 2)
+    {
+        printf("Usage: testticket <number of tickets>\n");
+        exit(1);
+    }
+    int tickets = atoi(argv[1]);
+    if(settickets(tickets)==-1) {
+        printf("error\n");
+        exit(1);
+    }
+    int rc = fork();
+    if(rc<0) {
+        printf("error\n");
+        exit(1);
+    }
+    else if(rc==0) {
+        // child
+        while (1){}
+    }
+    // parent do nothing
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..ecfdb8b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// new system calls
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..3145cc1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+# new system call
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
