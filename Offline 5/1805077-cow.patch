diff --git a/Makefile b/Makefile
index 39a99d7..66319e0 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,9 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_cowtest\
+	$U/_cowstep3\
+	$U/_cowstep4\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..f62efcf 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,13 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             add_ref_count(void *);
+int             ref_count(void *);
+int             iscowpage(pagetable_t, uint64);
+void*           cowalloc(pagetable_t, uint64);
+int             getfreememory(void);
+// int             getusedmemory(void);
+
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +113,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             pageinfo(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..7b827ad 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,10 +23,17 @@ struct {
   struct run *freelist;
 } kmem;
 
+// array for reference count, lock to avoid multiprocessor access
+struct {
+  struct spinlock lock;
+  int count[PHYSTOP / PGSIZE];
+} ref;
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&ref.lock, "ref");
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -35,8 +42,10 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    ref.count[(uint64)p / PGSIZE] = 1;
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -51,9 +60,19 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  //!
+  acquire(&ref.lock);
+  int i = (uint64)pa / PGSIZE;
+  ref.count[i]--;
+  // other process still referencing the page
+  if(ref.count[i] != 0){
+    release(&ref.lock);
+    return;
+  }
+  // if ref count is 0, free it
+  release(&ref.lock);
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
-
   r = (struct run*)pa;
 
   acquire(&kmem.lock);
@@ -72,11 +91,111 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r) {
     kmem.freelist = r->next;
+    // set ref count to 1, for a new free page
+    acquire(&ref.lock);
+    ref.count[(uint64)r / PGSIZE] = 1;
+    release(&ref.lock);
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// get reference count of a physical page
+int
+ref_count(void *pa)
+{
+  int i = (uint64)pa / PGSIZE;
+  return ref.count[i];
+}
+
+// called in uvmcopy when a cow page is referred second time
+int 
+add_ref_count(void *pa)
+{
+  // check if pa is valid
+  if (((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    return -1;
+  
+  int i = (uint64)pa / PGSIZE;
+  acquire(&ref.lock);
+  ref.count[i]++;
+  release(&ref.lock);
+  return 0;
+}
+
+// check if cowpage or not
+// returns 0 if cow page, -1 if not
+int
+iscowpage(pagetable_t pgtable, uint64 va)
+{
+  if (va >= MAXVA) return -1;
+  pte_t* pte = walk(pgtable, va, 0);
+  if (!pte) return -1;
+  if (!(*pte & PTE_V)) return -1;
+  // if valid and cow page then return 0
+  int cow = (*pte & PTE_COW);
+  if (!cow) return -1;
+  else return 0;
+}
+
+// allocate the page (basically ommitted things in uvmcopy)
+void*
+cowalloc(pagetable_t pgtable, uint64 va)
+{
+  // expected for parameter to be rounded down
+  if (va % PGSIZE) return 0;
+
+  uint64 pa = walkaddr(pgtable, va);
+  if (pa == 0) return 0;
+
+  pte_t* pte = walk(pgtable, va, 0);
+
+  int num_ref = ref_count((char*)pa);
+  if (num_ref == 1) {
+    // if there is only one process referencing to this cow page
+    *pte &= ~PTE_COW;
+    *pte |= PTE_W;
+    return (void*)pa;
+  } else {
+    // more than one process referencing
+    // allocate new page and copy the content
+    void* new_pa = kalloc();
+    if (new_pa == 0) return 0;
+    memmove(new_pa, (char*)pa, PGSIZE);
+    
+    *pte &= ~PTE_V;
+
+    int new_flags = (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW;
+    if (mappages(pgtable, va, PGSIZE, (uint64)new_pa, new_flags) != 0){
+      kfree(new_pa);
+      *pte |= PTE_V;
+      return 0;
+    }
+
+    kfree((char*)PGROUNDDOWN(pa));
+    return new_pa;
+  }
+}
+
+// get number of free pages
+int
+getfreememory(void)
+{
+  struct run *r;
+  int free_memory = 0;
+
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while (r) {
+    free_memory ++;
+    r = r->next;
+  }
+  release(&kmem.lock);
+
+  return free_memory;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..fbbd032 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,20 @@ procdump(void)
     printf("\n");
   }
 }
+
+int pageinfo(void)
+{
+  struct proc *p;
+  int total_used_pages = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED)
+      total_used_pages += p->sz / PGSIZE;
+    release(&p->lock);
+  }
+  // printf("\nsysinfo system call prints:\n");
+  printf("free-memory: %d pages\n", getfreememory());
+  printf("used-memory: %d pages\n", total_used_pages);
+  // printf("n_proc: %d\n\n", n_proc);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..c6077f3 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_COW (1L << 8) // copy on write bit (used from reserved bits)
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..7bda76e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_pageinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_pageinfo] sys_pageinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e2d93cd 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_pageinfo 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..92a8858 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,9 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_pageinfo()
+{
+  return pageinfo();
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..4d54ff6 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,6 +67,21 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if (r_scause() == 15){
+    // page fault handling for cow
+    uint64 va = r_stval();
+    if (va >= p->sz || va < 0) {
+      printf("usertrap(): page fault va %p is out of range", va);
+      setkilled(p);
+    } else if (iscowpage(p->pagetable, va) != 0) {
+      // check if cow page
+      printf("usertrap(): not a cowpage");
+      setkilled(p);
+    } else if (cowalloc(p->pagetable, PGROUNDDOWN(va)) == 0) {
+      // 
+      printf("usertrap(): cow alloc unsuccessful");
+      setkilled(p);
+    }
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..083891d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,8 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // as we don't allocate new memory
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -317,11 +318,27 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
+
+    // if write bit is on, then turn it off, and mark it as cow page
+    // update parent pte with the new flags
+    if (flags & PTE_W) {
+      flags = (flags | PTE_COW) & ~PTE_W;
+      *pte = PA2PTE(pa) | flags;
+    }
+    // map the page to the child va with the same flags
+    if (mappages(new, i, PGSIZE, pa, flags) != 0) {
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    }
+    // add reference count to cow page
+    if (add_ref_count((void*)pa) != 0) {
       goto err;
     }
   }
@@ -356,6 +373,13 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
+    // change pa0 to cow page address
+    if (iscowpage(pagetable, va0) == 0){
+      pa0 = (uint64)cowalloc(pagetable, va0);
+    }
+
+
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
diff --git a/user/cowstep3.c b/user/cowstep3.c
new file mode 100644
index 0000000..fd93190
--- /dev/null
+++ b/user/cowstep3.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+int main()
+{
+    int *a = (int*)sbrk(4096);
+    int rc = fork();
+    if (rc == 0) {
+        *a = 10;
+        printf("rc = %d", rc);
+        printf("a = %d\n", *a);
+    } else {
+        wait(0);
+        *a = 20;
+        printf("rc = %d", rc);
+        printf("a = %d\n", *a);
+    }
+    // printf("rc = %d", rc);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/cowstep4.c b/user/cowstep4.c
new file mode 100644
index 0000000..a544a28
--- /dev/null
+++ b/user/cowstep4.c
@@ -0,0 +1,29 @@
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+int main()
+{
+    int *a = (int*)sbrk(4096);
+    // pageinfo();
+    int rc = fork();
+    if (rc == 0) {
+        printf("child before write: ");
+        pageinfo();
+        *a = 10;
+        printf("child after write: ");
+        pageinfo();
+        // printf("a = %d\n", *a);
+    } else {
+        wait(0);
+        printf("parent before write: ");
+        pageinfo();
+        *a = 20;
+        printf("parent after write: ");
+        pageinfo();
+        // printf("a = %d\n", *a);
+    }
+    // pageinfo();
+    // printf("rc = %d", rc);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/cowtest.c b/user/cowtest.c
new file mode 100644
index 0000000..29b918f
--- /dev/null
+++ b/user/cowtest.c
@@ -0,0 +1,197 @@
+//
+// tests for copy-on-write fork() assignment.
+//
+
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+// allocate more than half of physical memory,
+// then fork. this will fail in the default
+// kernel, which does not support copy-on-write.
+void
+simpletest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = (phys_size / 3) * 2;
+
+  printf("simple: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+// three processes all write COW memory.
+// this causes more than half of physical memory
+// to be allocated, so it also checks whether
+// copied pages are freed.
+void
+threetest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = phys_size / 4;
+  int pid1, pid2;
+
+  printf("three: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  pid1 = fork();
+  if(pid1 < 0){
+    printf("fork failed\n");
+    exit(-1);
+  }
+  if(pid1 == 0){
+    pid2 = fork();
+    if(pid2 < 0){
+      printf("fork failed");
+      exit(-1);
+    }
+    if(pid2 == 0){
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        *(int*)q = getpid();
+      }
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        if(*(int*)q != getpid()){
+          printf("wrong content\n");
+          exit(-1);
+        }
+      }
+      exit(-1);
+    }
+    for(char *q = p; q < p + (sz/2); q += 4096){
+      *(int*)q = 9999;
+    }
+    exit(0);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  wait(0);
+
+  sleep(1);
+
+  for(char *q = p; q < p + sz; q += 4096){
+    if(*(int*)q != getpid()){
+      printf("wrong content\n");
+      exit(-1);
+    }
+  }
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void
+filetest()
+{
+  printf("file: ");
+  
+  buf[0] = 99;
+
+  for(int i = 0; i < 4; i++){
+    if(pipe(fds) != 0){
+      printf("pipe() failed\n");
+      exit(-1);
+    }
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(-1);
+    }
+    if(pid == 0){
+      sleep(1);
+      if(read(fds[0], buf, sizeof(i)) != sizeof(i)){
+        printf("error: read failed\n");
+        exit(1);
+      }
+      sleep(1);
+      int j = *(int*)buf;
+      if(j != i){
+        printf("error: read the wrong value\n");
+        exit(1);
+      }
+      exit(0);
+    }
+    if(write(fds[1], &i, sizeof(i)) != sizeof(i)){
+      printf("error: write failed\n");
+      exit(-1);
+    }
+  }
+
+  int xstatus = 0;
+  for(int i = 0; i < 4; i++) {
+    wait(&xstatus);
+    if(xstatus != 0) {
+      exit(1);
+    }
+  }
+
+  if(buf[0] != 99){
+    printf("error: child overwrote parent\n");
+    exit(1);
+  }
+
+  printf("ok\n");
+}
+
+int
+main(int argc, char *argv[])
+{
+  simpletest();
+
+  // check that the first simpletest() freed the physical memory.
+  simpletest();
+
+  threetest();
+  threetest();
+  threetest();
+
+  filetest();
+
+  printf("ALL COW TESTS PASSED\n");
+
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..54ebc7d 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int pageinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..fa837b6 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("pageinfo");
\ No newline at end of file
